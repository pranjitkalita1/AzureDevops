trigger:
  - none
pr: none
  

pool:
  name: 'az-weu-ubuntu-22.04-amd64-2cpu'

steps:
  - checkout: self
    submodules: true
    persistCredentials: true
    clean: true

  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'

  - task: AzureKeyVault@2
    displayName: Azure Key Vault
    inputs:
      azureSubscription: 'CIT-ECOM-TEST'
      KeyVaultName: 'kv-ecom-test-anchorage'
      SecretsFilter: '*'
      RunAsPreJob: false 

  - task: CmdLine@2
    displayName: Write Secret into File
    inputs:
      script: |
        echo "// 86acbd31cd7c09cf30acb66d2fbedc91daa48b86:1705917318.2997415" >>push-worker.js
        echo "importScripts('https://aswpsdkeu.com/notify/v1/ua-sdk.min.js')" >> push-worker.js
        echo "uaSetup.worker(self,{" >> push-worker.js
        echo "defaultIcon:""'https://www.tomtom.com/v2/gfx/favicon.png',"  >> push-worker.js
        echo "defaultTitle:""'TomTom',"  >> push-worker.js
        echo "defaultActionURL:""'https://www.preprod.tomtom.com/en_gb/navigation/',"  >> push-worker.js
        echo "appKey:""'"$(airship-appKey-preprod)+"',"  >> push-worker.js
        echo "token:""'"$(airship-token-preprod)+"',"  >> push-worker.js
        echo "vapidPublicKey:" "'$(airship-vapidPublicKey-preprod)'})"  >> push-worker.js

  - task: Bash@3
    displayName: Build
    name: 'Build_Task'
    inputs:
      targetType: 'inline'
      script: |
        node -v
        npm -v
        python -V
        gcc -v
        make -v
        git pull origin $(Build.SourceBranchName)
        npm install grunt-cli
        npm install
        mkdir -p build
        git checkout $(Build.SourceBranchName)
        git config user.email noreply@tomtom.com && git config user.name azure_pipelines
        npm run release-for-artifactory
        git add package.json
        git commit -m "package version change" 
        git status
        git branch
        git push origin HEAD:$(Build.SourceBranchName)
        NODE_VERSION=$(node -p -e "require('./package.json').version")
        echo "build version "$NODE_VERSION
        echo "##vso[task.setvariable variable=NODE_VERSION]$NODE_VERSION"


  - task: CmdLine@2
    displayName: Write Secret into File
    inputs:
      script: |
        echo "<project xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd' xmlns='http://maven.apache.org/POM/4.0.0'
         xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>" >> anchorage-client-ui-$(NODE_VERSION).pom
        echo "<modelVersion>4.0.0</modelVersion>"  >> anchorage-client-ui-$(NODE_VERSION).pom
        echo "<groupId>com.tomtom</groupId>"  >> anchorage-client-ui-$(NODE_VERSION).pom
        echo "<artifactId>anchorage-client-ui</artifactId>"  >> anchorage-client-ui-$(NODE_VERSION).pom
        echo "<version>$(NODE_VERSION)</version>"  >> anchorage-client-ui-$(NODE_VERSION).pom
        echo "<packaging>zip</packaging>"  >> anchorage-client-ui-$(NODE_VERSION).pom
        echo "</project>"  >> anchorage-client-ui-$(NODE_VERSION).pom

  - task: CopyFiles@2
    displayName: Copy files
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: 'anchorage-webapp/target/filtered/v2/**' # Pull the build directory (React)
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      
  - task: CopyFiles@2
    displayName: Copy files
    inputs:     
      Contents: 'anchorage-client-ui-$(NODE_VERSION).pom'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/anchorage-webapp/target/filtered/v2/downloads'

  - task: CopyFiles@2
    displayName: Copy files
    inputs:     
       Contents: 'push-worker.js'
       TargetFolder: '$(Build.ArtifactStagingDirectory)/anchorage-webapp/target/filtered/v2/js'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/anchorage-webapp/target/filtered/v2/'
      includeRootFolder: false
      # Archive
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/anchorage-webapp/target/filtered/v2/downloads/anchorage-client-ui-$(NODE_VERSION).zip'
   
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs: 
      pathtoPublish: $(Build.ArtifactStagingDirectory) # dist or build files
      ArtifactName: 'Anchorage-client-ui-artifact' # output artifact named Anchorage-client-ui-artifact

  - task: ArtifactoryGenericUpload@1
    displayName: Upload client-ui build to jfrog
    inputs:
      artifactoryService: 'jfrog-maven-artifactory-service-connection'
      specSource: 'taskConfiguration'
      fileSpec: |
        {
          "files": [
            {
              "pattern": "$(Build.ArtifactStagingDirectory)/anchorage-webapp/target/filtered/v2/downloads/*",
              "target": "svc-ecom-maven-release/com/tomtom/anchorage-client-ui/$(NODE_VERSION)/"
            }
          ]
        }
      collectBuildInfo: true
      buildName: 'anchorage-client-ui-$(NODE_VERSION)'
      buildNumber: '$(NODE_VERSION)'
      failNoOp: true
